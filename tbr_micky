CREATE DATABASE exerciciodefixaca;
USE exerciciodefixacao;

--exercicio1
--A)
CREATE TABLE nomes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255)
);
INSERT INTO nomes (nome) VALUES
    ('Roberta'),
    ('Roberto'),
    ('Maria Clara'),
    ('João');
--b)
SELECT UPPER(nome) AS nome_maiusculo FROM nomes;

--c)
SELECT nome, LENGTH(nome) AS tamanho_nome FROM nomes;

--d)
SELECT 
    CASE 
        WHEN nome LIKE '%Roberto%' OR nome LIKE '%João%' THEN CONCAT('Sr. ', nome)
        WHEN nome LIKE '%Roberta%' OR nome LIKE '%Maria Clara%' THEN CONCAT('Sra. ', nome)
        ELSE nome
    END AS nome_com_tratamento
FROM nomes;

--exercicio2
--a)
CREATE TABLE produtos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    produto VARCHAR(255) NOT NULL,
    preco DECIMAL(10, 2) NOT NULL,
    quantidade INT NOT NULL
);

--b)
SELECT produto, ROUND(preco, 2) AS preco_arredondado, quantidade
FROM produtos;

--c)
SELECT produto, preco, ABS(quantidade) AS quantidade_absoluta
FROM produtos;

--d)
SELECT AVG(preco) AS media_precos
FROM produtos;

--exercicio3
--a)
CREATE TABLE eventos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    data_evento DATETIME
);

INSERT INTO eventos (data_evento) VALUES
('2015-10-09 16:0:11'),
('2007-07-02 10:07:12'),
('1999-12-23 19:06:59'),
('194-04-05 11:05:59'),
('2025-01-10 20:04:00'),
('1900-02-21 13:03:34'),
('2013-12-14 16:01:30'),
('2024-09-09 17:10:12'),
('2021-08-19 18:57:10'),
('2016-10-02 00:00:00'),
('2048-09-14 10:06:00'),
('2008-07-28 22:04:38');

--b)
INSERT INTO eventos (data_evento)
SELECT NOW() as DatAtual;

--c)
SELECT data_evento, data_evento AS data_atual, DATEDIFF(NOW(), data_evento) AS Comparação_total
FROM eventos;

--d)
SELECT DAYNAME(data_evento) AS nome_dia_semana
FROM eventos;

--exercicio4
--a)
INSERT INTO produtos(produto, preco, quantidade) VALUES
('Batata', '05.00', 10),
('Maçã', '02.00', 0),
('Abacaxi', '08.50', 5);

SELECT produto, preco, quantidade,
       IF(quantidade > 0, 'Em estoque', 'Fora de estoque') AS status_estoque
FROM produtos;

--b)
SELECT produto, preco, quantidade,
    CASE
        WHEN preco <= 3.00 THEN 'Barato'
        WHEN preco <= 9.00 THEN 'Médio'
        ELSE 'Caro'
    END AS categoria_preco
FROM produtos;

--exercicio5
--a)
DELIMITER //
CREATE FUNCTION TOTAL_VALOR (quantidade INT, preco DECIMAL(10, 2))
RETURNS DECIMAL(10, 2) 
BEGIN
	DECLARE total DECIMAL(10, 2);
	SET total = quantidade * preco;
	RETURN total;

--b)
SELECT produto, preco, quantidade, TOTAL_VALOR(preco, quantidade) AS valor_total
FROM produtos;

--exercicio6
--a)
SELECT COUNT(produto) FROM produtos;

--b)
SELECT MAX(preco) FROM produtos;

--c)
SELECT MIN(preco) FROM produtos;

--d)
SELECT SUM(IF(quantidade > 0, preco * quantidade, 0)) AS total_em_estoque
FROM produtos;
